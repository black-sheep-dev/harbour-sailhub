#ifndef GITSIGNATURESTATE_H
#define GITSIGNATURESTATE_H

#include <QObject>

class GitSignatureState {
    Q_GADGET
public:
    enum State {
        Unknown,
        BAD_CERT,
        BAD_EMAIL,
        EXPIRED_KEY,
        GPGVERIFY_ERROR,
        GPGVERIFY_UNAVAILABLE,
        INVALID,
        MALFORMED_SIG,
        NOT_SIGNING_KEY,
        NO_USER,
        OCSP_ERROR,
        OCSP_PENDING,
        OCSP_REVOKED,
        UNKNOWN_KEY,
        UNKNOWN_SIG_TYPE,
        UNSIGNED,
        UNVERIFIED_EMAIL,
        VALID
    };
    Q_ENUM(State)
    Q_DECLARE_FLAGS(States, State)

    static quint8 fromString(const QString &str) {
        if (str == QLatin1String("BAD_CERT")) {
            return GitSignatureState::BAD_CERT;
        } else if (str == QLatin1String("BAD_EMAIL")) {
            return GitSignatureState::BAD_EMAIL;
        } else if (str == QLatin1String("EXPIRED_KEY")) {
            return GitSignatureState::EXPIRED_KEY;
        } else if (str == QLatin1String("GPGVERIFY_ERROR")) {
            return GitSignatureState::GPGVERIFY_ERROR;
        } else if (str == QLatin1String("GPGVERIFY_UNAVAILABLE")) {
            return GitSignatureState::GPGVERIFY_UNAVAILABLE;
        } else if (str == QLatin1String("INVALID")) {
            return GitSignatureState::INVALID;
        } else if (str == QLatin1String("MALFORMED_SIG")) {
            return GitSignatureState::MALFORMED_SIG;
        } else if (str == QLatin1String("NOT_SIGNING_KEY")) {
            return GitSignatureState::NOT_SIGNING_KEY;
        } else if (str == QLatin1String("NO_USER")) {
            return GitSignatureState::NO_USER;
        } else if (str == QLatin1String("OCSP_ERROR")) {
            return GitSignatureState::OCSP_ERROR;
        } else if (str == QLatin1String("OCSP_PENDING")) {
            return GitSignatureState::OCSP_PENDING;
        } else if (str == QLatin1String("OCSP_REVOKED")) {
            return GitSignatureState::OCSP_REVOKED;
        } else if (str == QLatin1String("UNKNOWN_KEY")) {
            return GitSignatureState::UNKNOWN_KEY;
        } else if (str == QLatin1String("UNKNOWN_SIG_TYPE")) {
            return GitSignatureState::UNKNOWN_SIG_TYPE;
        } else if (str == QLatin1String("UNSIGNED")) {
            return GitSignatureState::UNSIGNED;
        } else if (str == QLatin1String("UNVERIFIED_EMAIL")) {
            return GitSignatureState::UNVERIFIED_EMAIL;
        } else if (str == QLatin1String("VALID")) {
            return GitSignatureState::VALID;
        }

        return GitSignatureState::Unknown;
    }

    static QString toString(quint8 reason){
        switch (reason) {
        case GitSignatureState::BAD_CERT:
            return QStringLiteral("BAD_CERT");
        case GitSignatureState::BAD_EMAIL:
            return QStringLiteral("BAD_EMAIL");
        case GitSignatureState::EXPIRED_KEY:
            return QStringLiteral("EXPIRED_KEY");
        case GitSignatureState::GPGVERIFY_ERROR:
            return QStringLiteral("GPGVERIFY_ERROR");
        case GitSignatureState::GPGVERIFY_UNAVAILABLE:
            return QStringLiteral("GPGVERIFY_UNAVAILABLE");
        case GitSignatureState::INVALID:
            return QStringLiteral("INVALID");
        case GitSignatureState::MALFORMED_SIG:
            return QStringLiteral("MALFORMED_SIG");
        case GitSignatureState::NOT_SIGNING_KEY:
            return QStringLiteral("NOT_SIGNING_KEY");
        case GitSignatureState::NO_USER:
            return QStringLiteral("NO_USER");
        case GitSignatureState::OCSP_ERROR:
            return QStringLiteral("OCSP_ERROR");
        case GitSignatureState::OCSP_PENDING:
            return QStringLiteral("OCSP_PENDING");
        case GitSignatureState::OCSP_REVOKED:
            return QStringLiteral("OCSP_REVOKED");
        case GitSignatureState::UNKNOWN_KEY:
            return QStringLiteral("UNKNOWN_KEY");
        case GitSignatureState::UNKNOWN_SIG_TYPE:
            return QStringLiteral("UNKNOWN_SIG_TYPE");
        case GitSignatureState::UNSIGNED:
            return QStringLiteral("UNSIGNED");
        case GitSignatureState::UNVERIFIED_EMAIL:
            return QStringLiteral("UNVERIFIED_EMAIL");
        case GitSignatureState::VALID:
            return QStringLiteral("VALID");

        default:
            return QString();
        }
    }
};
Q_DECLARE_OPERATORS_FOR_FLAGS(GitSignatureState::States)

#endif // GITSIGNATURESTATE_H
